# JavaScript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  test_client:
    docker:
      # specify the version you desire here
      - image: circleci/node:lts
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4
    working_directory: ~/madu_gr_4/client
    steps:
      - checkout:
          path: ~/madu_gr_4
      # Download and cache dependencies

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: yarn install --frozen-lockfile

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      # run tests and coverage !

      - run: yarn eslint

      - run: yarn prettier

      - run:
          name: abort if uncommitted files (coming from `yarn install` or `prettier`)
          command: git diff-index --quiet HEAD --

      - run: COVERALLS_REPO_TOKEN=$COVERALLS_REPO_TOKEN yarn coverage

  test_back_end:
    docker:
      # specify the version you desire here
      - image: circleci/node:lts

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    working_directory: ~/madu_gr_4/back-end

    steps:
      - checkout:
          path: ~/madu_gr_4

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: npm install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

  build_client:
    docker:
      - image: circleci/node:lts

    working_directory: ~/repo

    steps:
      - checkout:
          path: ~/repo
      - setup_remote_docker
      - run:
          name: Create artifacts directory
          command: mkdir -p ~/repo/artifacts
      - run:
          name: Build client image
          command: docker build -t "${DOCKER_CLIENT_IMAGE_NAME}:${DOCKER_CLIENT_IMAGE_TAG}" ~/repo/client
      - run:
          name: Save image in artifacts directory
          command: docker save "${DOCKER_CLIENT_IMAGE_NAME}:${DOCKER_CLIENT_IMAGE_TAG}" -o ~/repo/artifacts/image_client
      - persist_to_workspace:
          root: artifacts
          paths:
            - image_client

  build_back_end:
    docker:
      - image: circleci/node:lts

    working_directory: ~/repo

    steps:
      - checkout:
          path: ~/repo
      - setup_remote_docker
      - run:
          name: Create artifacts directory
          command: mkdir -p ~/repo/artifacts
      - run:
          name: Build back-end image
          command: docker build -t "${DOCKER_BACK_END_IMAGE_NAME}:${DOCKER_BACK_END_IMAGE_TAG}" ~/repo/back-end
      - run:
          name: Save image in artifacts directory
          command: docker save "${DOCKER_BACK_END_IMAGE_NAME}:${DOCKER_BACK_END_IMAGE_TAG}" -o ~/repo/artifacts/image_back_end
      - persist_to_workspace:
          root: artifacts
          paths:
            - image_back_end

  push_images:
    docker:
      - image: circleci/node:lts
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /home/circleci/repo/artifacts
      - run:
          name: Connect to docker hub
          command: docker login $REGISTRY_ENDPOINT --username $REGISTRY_USERNAME --password $REGISTRY_PASSWORD
      - run:
          name: Load docker image client
          command: docker load -i artifacts/image_client
      - run:
          name: Push docker image client
          command: docker push "${DOCKER_CLIENT_IMAGE_NAME}:${DOCKER_CLIENT_IMAGE_TAG}"
      - run:
          name: Load docker image back-end
          command: docker load -i artifacts/image_back_end
      - run:
          name: Push docker image client
          command: docker push "${DOCKER_BACK_END_IMAGE_NAME}:${DOCKER_BACK_END_IMAGE_TAG}"


workflows:
  version: 2
  build_and_test:
    jobs:
      - test_client
      - test_back_end
      - build_client:
          requires:
            - test_client
            - test_back_end
      - build_back_end:
          requires:
            - test_client
            - test_back_end
      - push_images:
          requires:
            - build_client
            - build_back_end
